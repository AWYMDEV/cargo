// components/PhoneLogin.js
import { useState } from "react";
import { auth } from "../lib/firebase";
import { RecaptchaVerifier, signInWithPhoneNumber } from "firebase/auth";

export default function PhoneLogin() {
  const [phone, setPhone] = useState("+992123456789"); // üîÅ —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
  const [code, setCode] = useState("123456");          // üîÅ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
  const [confirmResult, setConfirmResult] = useState(null);

  const setupRecaptcha = () => {
    if (!window.recaptchaVerifier) {
      window.recaptchaVerifier = new RecaptchaVerifier(auth, "recaptcha-container", {
        size: "invisible",
      });
    }
  };

  const sendCode = async () => {
    setupRecaptcha();
    const appVerifier = window.recaptchaVerifier;
    try {
      const confirmation = await signInWithPhoneNumber(auth, phone, appVerifier);
      setConfirmResult(confirmation);
      alert("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π)");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:", err);
    }
  };

  const verifyCode = async () => {
    try {
      const result = await confirmResult.confirm(code);
      alert("–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, UID: " + result.user.uid);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", err);
    }
  };

  return (
    <div>
      <div id="recaptcha-container" />
      {!confirmResult ? (
        <>
          <input value={phone} onChange={(e) => setPhone(e.target.value)} />
          <button onClick={sendCode}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥</button>
        </>
      ) : (
        <>
          <input value={code} onChange={(e) => setCode(e.target.value)} />
          <button onClick={verifyCode}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        </>
      )}
    </div>
  );
}
