// üìÑ –§–∞–π–ª: /pages/onboarding/profile.js

import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import { supabase, supabaseUrl } from '../../lib/supabase'
import { toast } from 'react-toastify';

export default function CarrierOnboarding() {
  const router = useRouter()
  const role = router.query.role

  const [formData, setFormData] = useState({
    company_name: '',
    full_name: '',
    truck_type: '',
    mc_number: '',
    usdot_number: '',
    operating_states: '',
    phone: '',
    address: '',
    is_individual: true
  })

  const [documents, setDocuments] = useState([])
  const [profileCompleted, setProfileCompleted] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(null) // –æ—Ç 0 –¥–æ 100

  const truckTypes = ['Flatbed', 'Dry Van', 'Reefer', 'Step Deck', 'Box Truck', 'Power Only', 'Hotshot', 'Tanker']

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }))
  }

  const handleFileChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å 0 –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    setUploadProgress(0);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const {
        data: { user },
        error: userError
      } = await supabase.auth.getUser();

      if (userError || !user) {
        alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        return;
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: [—Ä–æ–ª—å]_[email]_[timestamp].[ext]
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_metadata
      const userName = user.user_metadata?.full_name || 'anonymous';

      // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–µ–ª–∞–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
      const sanitizedName = userName.trim().toLowerCase().replace(/\s+/g, '_');
      const timestamp = Date.now();
      const extension = file.name.split('.').pop();
      const fileName = `${role}_${sanitizedName}_${timestamp}.${extension}`;
      const filePath = `${fileName}`;

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
       .from(`${role}-documents`)  // ‚Üê ‚úÖ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –±–∞–∫–µ—Ç–∞
        .upload(filePath, file);

      if (uploadError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', uploadError);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
        return;
      }

      // –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É carrier_documents –∏–ª–∏ shipper_documents
      const documentsTable = `${role}_documents`;
      const insertRes = await supabase.from(documentsTable).insert({
        user_id: user.id,
        filename: fileName,
        path: filePath,
        uploaded_at: new Date().toISOString(),
        bucket: 'truck-documents'
      });

      if (insertRes.error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:', insertRes.error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É');
        return;
      }

      toast.success('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      setUploadProgress(null);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      setUploadProgress(null);
    }
  }

  const handleRemoveFile = async (index) => {
    const fileToRemove = documents[index]
    const { error } = await supabase.storage.from('truck-documents').remove([fileToRemove.path])
    if (error) return alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ' + error.message)
    setDocuments((prev) => prev.filter((_, i) => i !== index))
  }

  const handleSubmit = async () => {
    const { data: userData } = await supabase.auth.getUser()
    const user = userData?.user
    if (!user) return alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')

    const payload = {
      user_id: user.id,
      company_name: formData.company_name,
      full_name: formData.full_name,
      phone: formData.phone
    }

    if (role === 'shipper') {
      payload.address = formData.address
      payload.is_individual = formData.is_individual
    }

    if (role === 'carrier') {
      Object.assign(payload, {
        truck_type: formData.truck_type,
        mc_number: formData.mc_number,
        usdot_number: formData.usdot_number,
        operating_states: formData.operating_states
      })
    }

    const { error } = await supabase
      .from(role === 'carrier' ? 'carrier_profiles' : 'shipper_profiles')
      .insert(payload)

    if (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message)
    } else {
      setProfileCompleted(true)
      setTimeout(() => {
        router.push('/dashboard')
      }, 3000)
    }
  }

  return (
    <div className="max-w-xl mx-auto py-10 px-4 relative">
      <h2 className="text-2xl font-bold mb-6">
        {role === 'carrier' ? '–°—Ç–∞—Ç—å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º' : '–°—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º'}
      </h2>

      <label className="block font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ / –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∏–º—è</label>
      <input name="company_name" value={formData.company_name} onChange={handleChange}
        className="border border-gray-300 rounded px-3 py-2 mb-4 w-full" />

      <label className="block font-medium">–ü–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)</label>
      <input name="full_name" value={formData.full_name} onChange={handleChange}
        className="border border-gray-300 rounded px-3 py-2 mb-4 w-full" />

      <label className="block font-medium">–¢–µ–ª–µ—Ñ–æ–Ω</label>
      <input name="phone" value={formData.phone} onChange={handleChange}
        className="border border-gray-300 rounded px-3 py-2 mb-4 w-full" />

      {role === 'shipper' && (
        <>
          <label className="flex items-center mb-4">
            <input type="checkbox" name="is_individual" checked={formData.is_individual} onChange={handleChange} className="mr-2" />
            –Ø ‚Äî —á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ
          </label>

          <label className="block font-medium">–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å</label>
          <input name="address" value={formData.address} onChange={handleChange}
            className="border border-gray-300 rounded px-3 py-2 mb-4 w-full" />
        </>
      )}

      {role === 'carrier' && (
        <>
          <label className="block font-medium">–¢–∏–ø —Ç—Ä–∞–∫–∞</label>
          <select name="truck_type" value={formData.truck_type} onChange={handleChange}
            className="border border-gray-300 rounded px-3 py-2 mb-4 w-full">
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
            {truckTypes.map((type) => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>

          <label className="block font-medium">–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ (MC)</label>
          <input name="mc_number" value={formData.mc_number} onChange={handleChange}
            className="border border-gray-300 rounded px-3 py-2 mb-4 w-full" />

          <label className="block font-medium">–ù–æ–º–µ—Ä USDOT</label>
          <input name="usdot_number" value={formData.usdot_number} onChange={handleChange}
            className="border border-gray-300 rounded px-3 py-2 mb-4 w-full" />

          <label className="block font-medium">–®—Ç–∞—Ç—ã, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ</label>
          <input name="operating_states" value={formData.operating_states} onChange={handleChange}
            className="border border-gray-300 rounded px-3 py-2 mb-6 w-full" />
        </>
      )}

      <label className="block font-medium mb-2">
        {role === 'carrier' ? '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä–∞–∫–∞' : '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–∞—Å–ø–æ—Ä—Ç / –ª–∏—Ü–µ–Ω–∑–∏—è)'} (–º–∞–∫—Å. 5 —Ñ–∞–π–ª–æ–≤ –ø–æ 15MB)
      </label>
      <input type="file" accept=".pdf,.jpg,.jpeg,.png" onChange={handleFileChange} className="block mb-4" />

      {uploadProgress !== null && (
        <div className="text-sm text-blue-600 mt-2">
          –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {uploadProgress}%
        </div>
      )}

      <ul className="text-sm text-gray-700 mb-4">
        {documents.map((doc, idx) => (
          <li key={idx} className="flex justify-between items-center mb-1">
            <span>üìÑ {doc.name}</span>
            <button onClick={() => handleRemoveFile(idx)} className="text-red-600 hover:underline text-xs">–£–¥–∞–ª–∏—Ç—å</button>
          </li>
        ))}
      </ul>

      {!profileCompleted && (
        <button className="bg-green-700 text-white px-4 py-2 rounded" onClick={handleSubmit}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        </button>
      )}

      {/* ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–æ–ø–∞–ø */}
      {profileCompleted && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl p-6 max-w-sm text-center">
            <div className="text-green-600 text-4xl mb-4">‚úî</div>
            <p className="text-lg font-semibold mb-2">–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</p>
            <p className="text-sm text-gray-600">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</p>
          </div>
        </div>
      )}
    </div>
  )
}
