// üìÑ /pages/register.js

import { useState } from "react";
import { useRouter } from "next/router";
import Link from "next/link";
import { supabase } from "../lib/supabase";

export default function Register() {
  const router = useRouter();

  //popup modal page
const [showSuccessPopup, setShowSuccessPopup] = useState(false);

  // –®–∞–≥–∏
  const [step, setStep] = useState(1);

  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  // –†–æ–ª—å
  const [role, setRole] = useState("");

  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [fullName, setFullName] = useState("");
  const [city, setCity] = useState("");
  const [country, setCountry] = useState("");
  const [hasCompany, setHasCompany] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
  const [companyName, setCompanyName] = useState("");
  const [companyAddress, setCompanyAddress] = useState("");
  const [companyZip, setCompanyZip] = useState("");

  const [confirmData, setConfirmData] = useState(false);

  // –û—à–∏–±–∫–∏/—É—Å–ø–µ—Ö
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const validatePhone = (number) => /^\+?[0-9]{10,15}$/.test(number);

  // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
  const nextStep = () => {
    if (step === 1) {
      if (!phone || !email || !password || !confirmPassword) {
        setError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
        return;
      }
      if (!validatePhone(phone)) {
        setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        return;
      }
      if (password !== confirmPassword) {
        setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        return;
      }
    }
    if (step === 2 && !role) {
      setError("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å");
      return;
    }
    if (step === 3) {
      if (!fullName || !city || !country) {
        setError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
        return;
      }
      if (hasCompany && !companyName) {
        setError("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏");
        return;
      }
      if (!confirmData) {
        setError("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö");
        return;
      }
    }

    setError("");
    setStep((prev) => prev + 1);
  };

  const prevStep = () => setStep((prev) => prev - 1);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
const handleRegister = async (e) => {
  e.preventDefault();
  setError("");
  setSuccess("");

  // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: { data: { full_name: fullName, role } },
  });

  if (error) {
    setError(error.message);
    return;
  }

  const user = data.user;
  if (!user) {
    setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  // 2. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ user_roles
  const { data: userRole, error: roleError } = await supabase
    .from("user_roles")
    .insert([
      {
        user_id: user.id,
        role: role,
        status: "pending",
      },
    ])
    .select()
    .single();

  if (roleError) {
    setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏: " + roleError.message);
    return;
  }

  // 3. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ role_profiles
  const { error: profileError } = await supabase.from("role_profiles").insert([
    {
      user_role_id: userRole.id,
      company_name: hasCompany ? companyName : null,
      phone: phone,
      documents_url: null, // –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      status: "pending",
    },
  ]);

  if (profileError) {
    setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: " + profileError.message);
    return;
  }

  // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —É—Å–ø–µ—Ö–∞
  setShowSuccessPopup(true);
};


  // –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
const renderProgress = () => {
  const steps = [1, 2, 3] // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤

  return (
    <div className="flex justify-center items-center mb-6">
      {steps.map((s, i) => (
        <div key={i} className="flex items-center">
          {/* –ö—Ä—É–∂–æ–∫ */}
          <div
            className={`w-10 h-10 flex items-center justify-center rounded-full border-2 text-sm font-bold
              ${
                s < step
                  ? "bg-[#006BFF] border-[#006BFF] text-white" // –ø—Ä–æ—à–µ–¥—à–∏–π —à–∞–≥
                  : s === step
                  ? "border-[#006BFF] text-[#006BFF] bg-white" // –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
                  : "border-gray-300 text-gray-400 bg-white" // –±—É–¥—É—â–∏–π —à–∞–≥
              }`}
          >
            {s}
          </div>

          {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É –∫—Ä—É–∂–∫–∞–º–∏ */}
          {i < steps.length - 1 && (
            <div
              className={`h-0.5 w-12 mx-2 ${
                s < step ? "bg-[#006BFF]" : "bg-gray-300"
              }`}
            ></div>
          )}
        </div>
      ))}
    </div>
  )
}







  // –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–æ–ª–µ–π
  const RoleCard = ({ value, label }) => (
    <div
      onClick={() => setRole(value)}
      className={`cursor-pointer p-4 border rounded-lg text-center transition ${
        role === value
          ? "bg-[#006BFF] text-white border-[#006BFF]"
          : "bg-white text-gray-700 border-gray-300 hover:border-[#006BFF]"
      }`}
    >
      {label}
    </div>
  );

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow">
      <h2 className="text-2xl font-bold mb-4 text-center text-[#006BFF]">
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      </h2>



      {renderProgress()}
<div className="text-center mb-6">
  {step === 1 && (
    <h3 className="text-lg font-semibold text-gray-700">
      –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    </h3>
  )}
  {step === 2 && (
    <h3 className="text-lg font-semibold text-gray-700">
      –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å
    </h3>
  )}
  {step === 3 && (
    <h3 className="text-lg font-semibold text-gray-700">
      –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    </h3>
  )}
</div>
      <form onSubmit={handleRegister} className="space-y-4">
        {/* –®–∞–≥ 1 */}
        {step === 1 && (
          
          <>
            <input
              type="tel"
              placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="input"
            />
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="input"
            />
            <input
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input"
            />
            <input
              type="password"
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="input"
            />
            <p className="text-sm mt-2">
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
              <Link href="/login" className="text-[#006BFF] underline">
                –í–æ–π–¥–∏—Ç–µ
              </Link>
            </p>
          </>
        )}

        {/* –®–∞–≥ 2 */}
        {step === 2 && (
          <div className="grid grid-cols-1 gap-4">
            <RoleCard value="shipper" label="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" />
            <RoleCard value="carrier" label="–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫" />
            <RoleCard value="broker" label="–ë—Ä–æ–∫–µ—Ä" />
          </div>
        )}

        {/* –®–∞–≥ 3 */}
        {step === 3 && (
          <>
            <input
              type="text"
              placeholder="–§–ò–û"
              value={fullName}
              onChange={(e) => setFullName(e.target.value)}
              className="input"
            />
            <input
              type="text"
              placeholder="–ì–æ—Ä–æ–¥"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="input"
            />
            <input
              type="text"
              placeholder="–°—Ç—Ä–∞–Ω–∞"
              value={country}
              onChange={(e) => setCountry(e.target.value)}
              className="input"
            />

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è */}
            <label className="flex items-center mt-2">
              <input
                type="checkbox"
                checked={hasCompany}
                onChange={() => setHasCompany(!hasCompany)}
                className="mr-2"
              />
              –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è
            </label>

            {hasCompany && (
              <div className="mt-2 space-y-2">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                  value={companyName}
                  onChange={(e) => setCompanyName(e.target.value)}
                  className="input"
                />
                <input
                  type="text"
                  placeholder="–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏"
                  value={companyAddress}
                  onChange={(e) => setCompanyAddress(e.target.value)}
                  className="input"
                />
                <input
                  type="text"
                  placeholder="ZIP"
                  value={companyZip}
                  onChange={(e) => setCompanyZip(e.target.value)}
                  className="input"
                />
              </div>
            )}

            <label className="flex items-center mt-4">
              <input
                type="checkbox"
                checked={confirmData}
                onChange={() => setConfirmData(!confirmData)}
                className="mr-2"
                required
              />
              –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã
            </label>
          </>
        )}

        {error && <p className="text-red-600 text-sm">{error}</p>}
        {success && <p className="text-green-600 text-sm">{success}</p>}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex justify-between pt-4">
          {step > 1 && (
            <button
              type="button"
              onClick={prevStep}
              className="bg-gray-200 px-4 py-2 rounded-lg hover:bg-gray-300"
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
          )}
          {step < 3 && (
            <button
              type="button"
              onClick={nextStep}
              className="btn-primary"
            >
              –î–∞–ª–µ–µ ‚Üí
            </button>
          )}
          {step === 3 && (
            <button
              type="submit"
              className="btn-primary"
            >
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
          )}
        </div>
      </form>
      {showSuccessPopup && (
  <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
    <div className="bg-white p-8 rounded-lg shadow-lg text-center max-w-sm w-full">
      {/* –ì–∞–ª–æ—á–∫–∞ */}
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="mx-auto mb-4"
        width="64"
        height="64"
        fill="none"
        viewBox="0 0 24 24"
        stroke="green"
        strokeWidth={2}
      >
        <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l4 4L19 7" />
      </svg>

      {/* –¢–µ–∫—Å—Ç */}
      <h3 className="text-xl font-semibold text-green-700 mb-2">
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
      </h3>
      <p className="text-gray-600 text-sm mb-4">
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.
      </p>

      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ */}
      <button
        onClick={() => router.push("/login")}
        className="btn-primary"
      >
        –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É
      </button>
    </div>
  </div>
)}

    </div>
  );
}
