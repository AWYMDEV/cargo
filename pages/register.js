// üìÑ –§–∞–π–ª: /pages/register.js

import { useState } from 'react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { supabase } from '../lib/supabase'

export default function Register() {
  const router = useRouter()

  const [step, setStep] = useState(1)
  const [fullName, setFullName] = useState('')
  const [email, setEmail] = useState('')
  const [phone, setPhone] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [showPassword, setShowPassword] = useState(false)
  const [role, setRole] = useState('')
  const [isIndividual, setIsIndividual] = useState(true)
  const [confirmData, setConfirmData] = useState(false)

  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')

  const validatePhone = (number) => {
    const phoneRegex = /^\+?[0-9]{10,15}$/
    return phoneRegex.test(number)
  }

  const nextStep = () => {
    if (step === 1) {
      if (!fullName || !email || !phone || !password || !confirmPassword) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ')
        return
      }
      if (!validatePhone(phone)) {
        setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        return
      }
      if (password !== confirmPassword) {
        setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        return
      }
    }
    if (step === 2 && !role) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å')
      return
    }
    if (step === 3 && role === 'shipper' && isIndividual === null) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è')
      return
    }
    setError('')
    setStep((prev) => prev + 1)
  }

  const prevStep = () => setStep((prev) => prev - 1)

  const handleRegister = async (e) => {
    e.preventDefault()
    setError('')
    setSuccess('')

    if (password !== confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
      return
    }

    if (!validatePhone(phone)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      return
    }

    if (!confirmData) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö')
      return
    }

    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: fullName,
          phone,
          role,
          is_individual: role === 'shipper' ? isIndividual : null
        }
      }
    })

    if (error) {
      setError(error.message)
    } else {
      setSuccess('–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
      setTimeout(() => {
        router.push('/login')
      }, 3000)
    }
  }

  const renderStepIndicator = () => {
    const steps = [1, 2, 3, 4]
    return (
      <div className="flex justify-center mb-6 gap-4">
        {steps.map((s, i) => (
          <div
            key={i}
            className={`w-6 h-6 rounded-full border-2 flex items-center justify-center text-sm font-bold ${
              s < step
                ? 'bg-green-600 text-white border-green-600'
                : s === step
                ? 'bg-white text-green-700 border-green-600'
                : 'bg-white text-gray-400 border-gray-300'
            }`}
          >
            {s < step ? '‚úì' : s}
          </div>
        ))}
      </div>
    )
  }

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded shadow">
      <h2 className="text-2xl font-bold mb-4 text-center text-green-700">
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      </h2>

      {renderStepIndicator()}

      <form onSubmit={handleRegister} className="space-y-4">
        {step === 1 && (
          <>
            <input type="text" placeholder="–§–ò–û" value={fullName} onChange={(e) => setFullName(e.target.value)} required className="w-full border px-3 py-2 rounded" />
            <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required className="w-full border px-3 py-2 rounded" />
            <input type="tel" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" value={phone} onChange={(e) => setPhone(e.target.value)} required className="w-full border px-3 py-2 rounded" />
            <input type={showPassword ? 'text' : 'password'} placeholder="–ü–∞—Ä–æ–ª—å" value={password} onChange={(e) => setPassword(e.target.value)} required className="w-full border px-3 py-2 rounded" />
            <input type={showPassword ? 'text' : 'password'} placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required className="w-full border px-3 py-2 rounded" />
            <label className="flex items-center text-sm"><input type="checkbox" checked={showPassword} onChange={() => setShowPassword(!showPassword)} className="mr-2" /> –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å</label>
            <p className="text-sm mt-2">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link href="/login" className="text-blue-600 underline">–í–æ–π–¥–∏—Ç–µ</Link></p>
          </>
        )}

        {step === 2 && (
          <>
            <p className="text-sm font-medium mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:</p>
            <label className="block"><input type="radio" name="role" value="carrier" checked={role === 'carrier'} onChange={(e) => setRole(e.target.value)} className="mr-2" /> –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫</label>
            <label className="block"><input type="radio" name="role" value="shipper" checked={role === 'shipper'} onChange={(e) => setRole(e.target.value)} className="mr-2" /> –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</label>
            <label className="block"><input type="radio" name="role" value="broker" checked={role === 'broker'} onChange={(e) => setRole(e.target.value)} className="mr-2" /> –ë—Ä–æ–∫–µ—Ä</label>
          </>
        )}

        {step === 3 && role === 'shipper' && (
          <>
            <p className="text-sm font-medium mb-2">–í—ã ‚Äî</p>
            <label className="block"><input type="radio" name="type" value="true" checked={isIndividual === true} onChange={() => setIsIndividual(true)} className="mr-2" /> –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ</label>
            <label className="block"><input type="radio" name="type" value="false" checked={isIndividual === false} onChange={() => setIsIndividual(false)} className="mr-2" /> –ö–æ–º–ø–∞–Ω–∏—è</label>
          </>
        )}

        {step === 4 && (
          <>
            <label className="flex items-center">
              <input type="checkbox" checked={confirmData} onChange={() => setConfirmData(!confirmData)} className="mr-2" />
              –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã
            </label>
          </>
        )}

        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
        {success && <p className="text-green-600 text-sm mt-2">{success}</p>}

        <div className="flex justify-between pt-4">
          {step > 1 && <button type="button" onClick={prevStep} className="bg-gray-200 px-4 py-2 rounded hover:bg-gray-300">‚Üê –ù–∞–∑–∞–¥</button>}
          {step < 4 && <button type="button" onClick={nextStep} className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 ml-auto">–î–∞–ª–µ–µ ‚Üí</button>}
          {step === 4 && (
            <button type="submit" className="bg-green-700 text-white px-4 py-2 rounded ml-auto">
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
          )}
        </div>
      </form>
    </div>
  )
}
